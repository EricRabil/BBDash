@import "../foundation/mixins";
@import "../variables";

$column-border-radius: 5px;

@mixin pseudo-init($sizing: 1) {
    position: absolute;
    content: '';
    top: 0;
    left: 0;
    @if $sizing == 1 {
        width: 100%;
        height: 100%;
    }
}

@mixin column-rounded {
    border-radius: var(--border-radius);
}

@mixin cell-dashed($condition, $from, $to) {
    &[#{$condition}] > .data-cell--inner::before {
        @include dashed($from, $to);
    }
}

@mixin cell-background {
    @include palette-property-transition(background-color, var(--cellBackground, var(--palette-default-background-color)));
}

@mixin cell-text-color {
    @include palette-property-transition(color, var(--cellTextColor, var(--palette-default-text-color)));
}

@mixin configurable-background($value) {
    &::before {
        // cell background
        @include pseudo-init($sizing: 0);
        @include palette-property-transition(background-color, $value);
        @include column-rounded;

        width: 100%;
        height: 100%;

        // background should be an accent
        opacity: 0.5;
    }
}

:root {
    --border-radius: #{$column-border-radius};
}

.column-container {
    @include column-rounded;

    --item-width: calc(100% - 20px);

    display: grid;
    justify-items: center;

    grid-template-rows: max-content minmax(0, 1fr);
    grid-template-columns: minmax(0, 1fr);
    row-gap: 7.5px;

    padding: 7.5px 0;
    margin: 5px 0;

    max-height: calc(100vh - 25px);
    background: rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(0, 0, 0, 0.2);

    position: relative;

    @include configurable-background(var(--column-background-color));

    .column-drag-handle {
        cursor: move;
        position: absolute;
        height: 100%;
        width: 100%;
        position: absolute;
        width: 100%;
        height: 100%;
    }

    & > .column-header {
        @include column-rounded;

        display: flex;
        flex-flow: row;
        align-items: center;
        user-select: none;
        
        position: relative;

        width: calc(var(--item-width) - 20px);

        .column-header--main {
            flex: 1;
            font-weight: 500;
            font-size: 1.25em;
        }

        .column-prefs-toggle {
            @include palette-property-transition(opacity, 0.6);
            cursor: pointer;

            &:focus {
                outline: 1px solid black;
            }

            &:hover, &:focus {
                opacity: 0.8;
            }

            &:active {
                opacity: 1;
            }
        }
    }

    & > .column-body {
        --column-background-width-offset: 0px;

        width: var(--item-width);

        ::-webkit-scrollbar-track {
            margin: 10px;
        }

        ::-webkit-scrollbar {
            background: none;
        }

        & .virtualized-container {
            // scroll appearance
            overflow: overlay !important;
            border-radius: var(--border-radius);

            & > [role=rowgroup] > [role=row]:not(:last-child) .column-cell {
                // offset background so it doesnt bleed into spacer
                --column-background-width-offset: 5px;

                &::after {
                    // separator between cells
                    content: '';
                    height: 5px;
                }
            }
        }

        & .column-cell {
            @include cell-text-color;

            position: relative;

            display: flex;
            flex-flow: column;
            justify-content: center;

            padding: 15px 10px;

            // indicate it is pinned
            @include cell-dashed('attr-pinned=true', rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.1));

            // red strikethrough to show its normally hidden
            @include cell-dashed('attr-hidden=true', rgba(255, 0, 0, 0.05), rgba(255, 0, 0, 0.1));

            &::before {
                // cell background
                @include pseudo-init($sizing: 0);
                @include cell-background;
                @include column-rounded;

                width: 100%;
                height: calc(100% - var(--column-background-width-offset));

                // background should be an accent
                opacity: 0.5;
            }

            & > .data-cell--inner {
                @include palette-property-transition(background-color, rgba(255, 255, 255, 0.2));
                @include column-rounded;

                border: 1px solid rgba(0, 0, 0, 0.2);
                z-index: 1;
            }

            a {
                @include cell-text-color;

                font-weight: 500;

                &:not(:hover) {
                    text-decoration: none;
                }
            }
        }
    }
}