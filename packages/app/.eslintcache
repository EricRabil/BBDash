[{"/Users/ericrabil/eric.git/BBDash/packages/app/src/index.tsx":"1","/Users/ericrabil/eric.git/BBDash/packages/app/src/App.tsx":"2","/Users/ericrabil/eric.git/BBDash/packages/app/src/columns/GradesColumn.tsx":"3","/Users/ericrabil/eric.git/BBDash/packages/app/src/components/Column.tsx":"4","/Users/ericrabil/eric.git/BBDash/packages/app/src/components/ColumnCell.tsx":"5","/Users/ericrabil/eric.git/BBDash/packages/app/src/cells/GradeCell.tsx":"6","/Users/ericrabil/eric.git/BBDash/packages/app/src/columns/StreamColumn.tsx":"7","/Users/ericrabil/eric.git/BBDash/packages/app/src/cells/StreamEntryCell.tsx":"8","/Users/ericrabil/eric.git/BBDash/packages/app/src/composables/useDefaultPreferences.ts":"9","/Users/ericrabil/eric.git/BBDash/packages/app/src/components/ColumnSettingsField.tsx":"10","/Users/ericrabil/eric.git/BBDash/packages/app/src/boot/fontawesome.ts":"11","/Users/ericrabil/eric.git/BBDash/packages/app/src/composables/_query.ts":"12","/Users/ericrabil/eric.git/BBDash/packages/app/src/storage/column-items.ts":"13","/Users/ericrabil/eric.git/BBDash/packages/app/src/components/ColumnGrid.tsx":"14","/Users/ericrabil/eric.git/BBDash/packages/app/src/composables/useCourses.ts":"15","/Users/ericrabil/eric.git/BBDash/packages/app/src/composables/useStream.ts":"16","/Users/ericrabil/eric.git/BBDash/packages/app/src/composables/useGrades.ts":"17","/Users/ericrabil/eric.git/BBDash/packages/app/src/api.ts":"18","/Users/ericrabil/eric.git/BBDash/packages/app/src/api-clients/chrome.ts":"19","/Users/ericrabil/eric.git/BBDash/packages/app/src/api-clients/rest.ts":"20","/Users/ericrabil/eric.git/BBDash/packages/app/src/columns/CourseContentsColumn.tsx":"21","/Users/ericrabil/eric.git/BBDash/packages/app/src/composables/useCourseContents.ts":"22","/Users/ericrabil/eric.git/BBDash/packages/app/src/utils/feeds.ts":"23","/Users/ericrabil/eric.git/BBDash/packages/app/src/utils/prefs.ts":"24","/Users/ericrabil/eric.git/BBDash/packages/app/src/cells/CourseContentCell.tsx":"25","/Users/ericrabil/eric.git/BBDash/packages/app/src/utils/courses.ts":"26"},{"size":379,"mtime":1612387664384,"results":"27","hashOfConfig":"28"},{"size":2929,"mtime":1613591311702,"results":"29","hashOfConfig":"28"},{"size":1540,"mtime":1613597922764,"results":"30","hashOfConfig":"28"},{"size":3200,"mtime":1611682772186,"results":"31","hashOfConfig":"28"},{"size":370,"mtime":1611603019192,"results":"32","hashOfConfig":"28"},{"size":2110,"mtime":1611683650197,"results":"33","hashOfConfig":"28"},{"size":8028,"mtime":1613601814439,"results":"34","hashOfConfig":"28"},{"size":2775,"mtime":1613584589849,"results":"35","hashOfConfig":"28"},{"size":897,"mtime":1613595086659,"results":"36","hashOfConfig":"28"},{"size":4541,"mtime":1613598929205,"results":"37","hashOfConfig":"28"},{"size":230,"mtime":1613591303780,"results":"38","hashOfConfig":"28"},{"size":89,"mtime":1612282333616,"results":"39","hashOfConfig":"28"},{"size":1561,"mtime":1612384590856,"results":"40","hashOfConfig":"28"},{"size":1364,"mtime":1612385971219,"results":"41","hashOfConfig":"28"},{"size":440,"mtime":1612383459789,"results":"42","hashOfConfig":"28"},{"size":268,"mtime":1612383470820,"results":"43","hashOfConfig":"28"},{"size":268,"mtime":1612383463989,"results":"44","hashOfConfig":"28"},{"size":88,"mtime":1613519431434,"results":"45","hashOfConfig":"28"},{"size":230,"mtime":1611717250973,"results":"46","hashOfConfig":"28"},{"size":1223,"mtime":1611700299076,"results":"47","hashOfConfig":"28"},{"size":6654,"mtime":1613658889550,"results":"48","hashOfConfig":"28"},{"size":427,"mtime":1613582640524,"results":"49","hashOfConfig":"28"},{"size":84,"mtime":1613598077176,"results":"50","hashOfConfig":"28"},{"size":364,"mtime":1613600594280,"results":"51","hashOfConfig":"28"},{"size":1671,"mtime":1613590866714,"results":"52","hashOfConfig":"28"},{"size":254,"mtime":1613584569818,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1glnzxv",{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ericrabil/eric.git/BBDash/packages/app/src/index.tsx",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/App.tsx",["115","116","117"],"import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport CourseContentsColumn from \"./columns/CourseContentsColumn\";\r\nimport GradesColumn from \"./columns/GradesColumn\";\r\nimport StreamColumn from \"./columns/StreamColumn\";\r\nimport { ColumnOptions } from \"./components/Column\";\r\nimport ColumnGrid from \"./components/ColumnGrid\";\r\nimport \"./scss/_index.scss\";\r\nimport usePersistentColumns from \"./storage/column-items\";\r\n\r\ntype ExtractColumnOptionType<T> = T extends ColumnOptions<infer U> ? U : never;\r\n\r\ninterface ColumnDefinition {\r\n    icon: IconProp;\r\n    component: React.FunctionComponentFactory<any>;\r\n    id: string;\r\n}\r\n\r\ntype x = typeof GradesColumn\r\n\r\nconst columns: ColumnDefinition[] = [\r\n    {\r\n        icon: \"align-left\",\r\n        component: StreamColumn,\r\n        id: \"stream\"\r\n    },\r\n    {\r\n        icon: \"percent\",\r\n        component: GradesColumn,\r\n        id: \"grades\"\r\n    },\r\n    {\r\n        icon: \"database\",\r\n        component: CourseContentsColumn,\r\n        id: \"contents\"\r\n    }\r\n];\r\n\r\nconst findColumnByID: (id: string) => ColumnDefinition | null = id => columns.find(c => c.id === id) || null;\r\n\r\nfunction App() {\r\n    const [columnItems, setColumnItems, { addColumn, removeColumn, updatePreferences }] = usePersistentColumns();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"sidebar\">\r\n                {columns.map(({ icon, id }) => (\r\n                    <FontAwesomeIcon icon={icon} key={id} onClick={() => addColumn(id)} />\r\n                ))}\r\n            </div>\r\n            <ColumnGrid\r\n                columnItems={columnItems}\r\n                onLayoutChange={layout => {\r\n                    const newColumnItems = columnItems.slice();\r\n\r\n                    console.log({\r\n                        layout,\r\n                        newColumnItems\r\n                    });\r\n\r\n                    layout.forEach(entry => {\r\n                        newColumnItems[+entry.i].column = entry.x;\r\n                    });\r\n\r\n                    setColumnItems(newColumnItems);\r\n                }}\r\n            >\r\n                {columnItems.map((item, index) => {\r\n                    const Element = findColumnByID(item.id)?.component;\r\n\r\n                    if (!Element) return <div key={index} data-grid={{ x: item.column, y: 0, w: 1, h: 1 }} />;\r\n\r\n                    return <Element\r\n                        key={index}\r\n                        data-grid={{ x: item.column, y: 0, w: 1, h: 1 }}\r\n                        id={index}\r\n                        preferences={item.preferences}\r\n                        updatePreferences={(preferences: object) => updatePreferences(index, preferences)}\r\n                        remove={() => removeColumn(index)} />;\r\n                })}\r\n            </ColumnGrid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","/Users/ericrabil/eric.git/BBDash/packages/app/src/columns/GradesColumn.tsx",["118"],"import React from \"react\";\n// import { useSelector } from \"react-redux\";\n// import { getCourses } from \"../app/slices/courses\";\n// import { getGrades } from \"../app/slices/grades\";\nimport GradeCell from \"../cells/GradeCell\";\nimport Column, { BasePreferences, ColumnOptions } from \"../components/Column\";\nimport ColumnSettingsField from \"../components/ColumnSettingsField\";\nimport useCourses from \"../composables/useCourses\";\nimport { useDefaultPreferences, useMergePreferences } from \"../composables/useDefaultPreferences\";\nimport useGrades from \"../composables/useGrades\";\n\nexport interface GradesPreferences extends BasePreferences {\n    hideNACourses: boolean;\n}\n\nconst defaults: GradesPreferences = {\n    hideNACourses: false,\n    name: \"Grades\"\n};\n\nexport default function GradesColumn(props: ColumnOptions<GradesPreferences>) {\n    const courses = useCourses();\n    const grades = useGrades();\n\n    useDefaultPreferences(props, defaults);\n    const merge = useMergePreferences(props);\n\n    return <Column header={<div>Grades</div>} settings={(\n        <React.Fragment>\n            <ColumnSettingsField type=\"checkbox\" labelText={(\n                <React.Fragment>Hide courses with no grade</React.Fragment>\n            )} prefKey=\"hideNACourses\" {...props} />\n        </React.Fragment>\n    )} {...props}>\n        {Object.entries(grades).map(([ courseID, grades ]) => (\n            <GradeCell key={courseID} course={courses[courseID]} grades={grades} hideIfNA={props.preferences.hideNACourses}></GradeCell>\n        ))}\n    </Column>;\n}","/Users/ericrabil/eric.git/BBDash/packages/app/src/components/Column.tsx",["119"],"import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport classnames from \"classnames\";\nimport React, { PropsWithChildren, PropsWithoutRef, ReactNode, useLayoutEffect, useState } from \"react\";\nimport { useMergePreferences } from \"../composables/useDefaultPreferences\";\nimport ColumnCell from \"./ColumnCell\";\n\nexport interface BasePreferences {\n    name: string;\n}\n\nexport interface ColumnOptions<Preferences extends BasePreferences> extends PropsWithoutRef<{}> {\n    name?: string;\n    updatePreferences: (preferences: Preferences) => void;\n    preferences: Preferences;\n    remove: Function;\n}\n\nexport default function Column<Preferences extends BasePreferences>(props: PropsWithChildren<{\n    header?: ReactNode;\n    settings?: ReactNode;\n    className?: string;\n} & ColumnOptions<Preferences>>) {\n    const [showingSettings, setShowingSettings] = useState(false);\n    const [transitioning, setTransitioning] = useState(false);\n    const [settingsCell, setSettingsCell] = useState(null as HTMLDivElement | null);\n    const [settingsHeight, setSettingsHeight] = useState(0);\n\n    const { children, className, settings, remove, ...divProps } = props;\n\n    useLayoutEffect(() => {\n        setSettingsHeight(showingSettings ? Array.from(settingsCell?.children || []).reduce((a,c) => a + c.clientHeight, 0) : 0);\n    }, [showingSettings]);\n\n    useLayoutEffect(() => {\n        setTransitioning(true);\n    }, [settingsHeight]);\n\n    const merge = useMergePreferences(props);\n\n    return (\n        <div className={classnames(\"column-container\", className)} {...divProps}>\n            <div className=\"column-drag-handle\" />\n\n            <div className=\"column-header\">\n                <div className=\"column-header--main\">\n                    {props.preferences.name}\n                </div>\n\n                <span className=\"column-prefs-toggle\" onClick={() => setShowingSettings(!showingSettings)}>\n                    <FontAwesomeIcon icon=\"cog\" />\n                </span>\n            </div>\n\n            <div className=\"column-body\">\n                <ColumnCell className=\"settings-cell\" style={{\n                    height: `${settingsHeight}px`,\n                    display: (showingSettings || transitioning) ? undefined : \"none\"\n                }} rootRef={setSettingsCell} onTransitionEnd={() => {\n                    setTransitioning(false);\n                }}>\n                    <div className=\"settings-cell-body\">\n                        {settings}\n\n                        <label>\n                            Column Name\n                            \n                            <input type=\"text\" value={props.preferences.name} onChange={event => merge({ name: event.currentTarget.value } as any)} />\n                        </label>\n                    </div>\n                    <div className=\"settings-cell-footer\">\n                        <div className=\"settings-cell-footer--action danger\" onClick={() => remove()}>\n                            <FontAwesomeIcon icon=\"trash\" />\n                            Delete\n                        </div>\n                    </div>\n                </ColumnCell>\n                {children}\n            </div>\n        </div>\n    );\n}","/Users/ericrabil/eric.git/BBDash/packages/app/src/components/ColumnCell.tsx",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/cells/GradeCell.tsx",["120"],"import { Course, GradebookEntry, GradebookStatus } from \"@bbdash/shared\";\nimport React from \"react\";\nimport ColumnCell from \"../components/ColumnCell\";\n\nfunction num(numbers: (number | null | undefined)[], fallback: number): number {\n    const existing = numbers.find(num => typeof num === \"number\");\n    if (typeof existing === \"number\") return existing;\n    else return fallback;\n}\n\nconst pointsEarned = (entry: GradebookEntry) => typeof entry.manualGrade === \"number\" ? entry.manualGrade : typeof entry.displayGrade?.score === \"number\" ? entry.displayGrade.score : null;\n\nexport default class GradeCell extends React.Component<{\n    course: Course;\n    grades: GradebookEntry[];\n    hideIfNA: boolean;\n}> {\n    gradebookURL() {\n        const url = new URL(this.props.course.externalAccessUrl);\n\n        url.searchParams.set(\"legacyUrl\", `/webapps/gradebook/do/student/viewGrades?course_id=${this.props.course.id}`);\n\n        return url.toString();\n    }\n\n    grade() {\n        const { actual, possible } = this.props.grades.filter(g => g.status === GradebookStatus.GRADED).reduce(({ actual, possible }, grade) => {\n            const earned = pointsEarned(grade);\n\n            return {\n                actual: actual + (earned || 0),\n                possible: possible + (typeof earned === \"number\" ? grade.pointsPossible : 0)\n            };\n        }, { actual: 0, possible: 0 });\n\n        const percentage = (actual / possible) * 100;\n\n        if (isNaN(percentage)) return this.props.hideIfNA ? null : \"N/A\";\n        else return `${percentage.toFixed(2)}%`;\n    }\n\n    render() {\n        const grade = this.grade();\n\n        if (grade === null) return null;\n\n        return <ColumnCell className=\"data-cell\">\n            <div className=\"data-cell--inner\">\n                <div className=\"data-cell--header\">\n                    <a href={this.gradebookURL()} className=\"data-cell--header-title\" target=\"_blank\" rel=\"noreferrer\">{this.props.course.displayName}</a>\n                </div>\n                <div className=\"data-cell--description\">{grade}</div>\n            </div>\n        </ColumnCell>;\n    }\n}","/Users/ericrabil/eric.git/BBDash/packages/app/src/columns/StreamColumn.tsx",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/cells/StreamEntryCell.tsx",["121","122"],"import { Course, StreamEntry } from \"@bbdash/shared\";\nimport { DateTime } from \"luxon\";\nimport React from \"react\";\nimport ColumnCell from \"../components/ColumnCell\";\nimport { courseLink } from \"../utils/courses\";\n\nconst renderBlacklist = [\n    \"resource/x-osv-kaltura/mashup\",\n    \"resource/x-bb-externallink\"\n];\n\nexport default class StreamEntryCell extends React.Component<{\n    course: Course;\n    entry: StreamEntry;\n    style?: React.CSSProperties | undefined;\n    rootRef?: ((element: Element) => void) | undefined;\n}> {\n    title() {\n        return this.props.entry.itemSpecificData.title || this.props.entry.itemSpecificData.notificationDetails?.announcementTitle;\n    }\n\n    description() {\n        return this.props.entry.itemSpecificData.contentExtract;\n    }\n\n    dueDate() {\n        const dueDate = this.props.entry.itemSpecificData.notificationDetails?.dueDate;\n\n        if (dueDate) return DateTime.fromJSDate(new Date(dueDate)).toLocaleString(DateTime.DATETIME_FULL);\n        else return null;\n    }\n\n    postedDate() {\n        const timestamp = this.props.entry.se_timestamp;\n\n        return DateTime.fromMillis(timestamp).toLocaleString(DateTime.DATE_SHORT);\n    }\n\n    link() {\n        if (!this.props.entry.se_itemUri) return null;\n\n        return courseLink(this.props.course, this.props.entry.se_itemUri);\n    }\n\n    render() {\n        if (renderBlacklist.includes(this.props.entry.itemSpecificData?.contentDetails?.contentHandler)) return null;\n\n        const title = this.title(), description = this.description(), dueDate = this.dueDate(), link = this.link();\n\n        if (!title && !description) return null;\n\n        const HeaderTitle = link ? \"a\" : \"div\";\n\n        return (\n            <ColumnCell rootRef={this.props.rootRef as any} className=\"data-cell\" style={this.props.style}>\n                <div className=\"data-cell--inner\">\n                    <div className=\"data-cell--header\">\n                        <HeaderTitle href={link!} target={link ? \"_blank\" : undefined} className=\"data-cell--header-title\">{title}</HeaderTitle>\n                        <div className=\"data-cell--muted\">{this.postedDate()}</div>\n                    </div>\n                    <div className=\"data-cell--muted\">{this.props.course.displayName}</div>\n                    {\n                        description ? <div className=\"data-cell--description\" dangerouslySetInnerHTML={{\n                            __html: description\n                        }}></div> : null\n                    }\n                    {\n                        dueDate ? <div className=\"data-cell--muted data-cell--strong\">\n                Due Date: {dueDate}\n                        </div> : null\n                    }\n                </div>\n            </ColumnCell>\n        );\n    }\n}","/Users/ericrabil/eric.git/BBDash/packages/app/src/composables/useDefaultPreferences.ts",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/components/ColumnSettingsField.tsx",["123","124"],"import React, { useMemo } from \"react\";\nimport { useMergePreferences } from \"../composables/useDefaultPreferences\";\nimport { BasePreferences, ColumnOptions } from \"./Column\";\n\nexport interface ColumnSettingsFieldOptions<Preferences extends BasePreferences> extends ColumnOptions<Preferences> {\n    type: string;\n    labelText: React.ReactNode;\n    prefKey?: keyof Preferences;\n    onUpdate?: (value: unknown) => void;\n    value?: unknown;\n}\n\nexport interface ColumnSettingsListFieldOptions<Preferences extends BasePreferences> extends Omit<ColumnSettingsFieldOptions<Preferences>, \"labelText\"> {\n    values: string[];\n    multi: boolean;\n    prefKey: keyof Preferences;\n    header: React.ReactNode;\n    labelText: (value: string) => React.ReactNode;\n}\n\n/**\n * HOC that manages a list of checkbox/radio items\n * @param props \n */\nexport function ColumnSettingsListField<Preferences extends BasePreferences>({ multi, header, prefKey, labelText, values, updatePreferences, remove, preferences }: ColumnSettingsListFieldOptions<Preferences>) {\n    const expectedType = multi ? \"object\" : \"string\";\n\n    type Ledger = Record<string, boolean>;\n    type PrefValue = Preferences[keyof Preferences];\n\n    const ledger = useMemo(() => values.reduce((acc, key) => Object.assign(acc, {\n        // @ts-ignore\n        [key]: expectedType === \"string\" ? preferences[prefKey] === key : !!(preferences[prefKey] || {})[key]\n    }), {} as Ledger), [preferences, preferences[prefKey]]);\n\n    function assure() {\n        if (typeof preferences[prefKey] !== expectedType) {\n            switch (expectedType) {\n            case \"object\":\n                updatePreferences({\n                    ...preferences,\n                    [prefKey]: values.reduce((acc, c) => Object.assign(acc, { [c]: false }), {})\n                });\n                break;\n            case \"string\":\n                updatePreferences({\n                    ...preferences,\n                    [prefKey]: null\n                });\n                break;\n            }\n        }\n    }\n\n    function write(key: string, value: boolean) {\n        assure();\n\n        switch (expectedType) {\n        case \"object\":\n            updatePreferences({\n                ...preferences,\n                [prefKey]: {\n                    ...preferences[prefKey],\n                    [key]: value\n                }\n            });\n            break;\n        case \"string\":\n            updatePreferences({\n                ...preferences,\n                [prefKey]: value ? key : (!value && preferences[prefKey] === key as unknown as PrefValue) ? null : preferences[prefKey]\n            });\n            break;\n        }\n    }\n\n    const chunkName = `${Date.now().toString()}-${prefKey}`;\n\n    return (\n        <div className=\"column-settings-list\">\n            <div className=\"column-settings-list--header\">\n                {header}\n            </div>\n            <div className=\"column-settings-list--body\">\n                {values.map(key => (\n                    <ColumnSettingsField key={key} type={multi ? \"checkbox\" : \"radio\"} name={chunkName} labelText={labelText(key)} onUpdate={value => write(key, value as boolean)} value={ledger[key]} {...{ updatePreferences, remove, preferences }} />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default function ColumnSettingsField<Preferences extends BasePreferences>(props: ColumnSettingsFieldOptions<Preferences>) {\n    const merge = useMergePreferences(props);\n    const preferenceValue = props.prefKey ? props.preferences[props.prefKey] : (props.value || false);\n\n    function apply(value: unknown) {\n        if (props.prefKey) merge({ [props.prefKey]: value } as Partial<Preferences>);\n        else props.onUpdate!(value);\n    }\n\n    const isCheckable = useMemo(() => [\"checkbox\", \"radio\"].includes(props.type), [props.type]);\n\n    return (\n        <label>\n            {props.type === \"checkbox\" ? null : props.labelText}\n\n            <input type={props.type} checked={isCheckable ? preferenceValue as unknown as boolean : false} name={props.name} value={isCheckable ? undefined : preferenceValue as unknown as string} onChange={event => {\n                switch (props.type) {\n                case \"checkbox\":\n                case \"radio\":\n                    apply(event.currentTarget.checked);\n                    break;\n                default:\n                    apply(event.currentTarget.value);\n                }\n            }} />\n\n            {props.type === \"checkbox\" ? props.labelText : null}\n        </label>\n    );\n}","/Users/ericrabil/eric.git/BBDash/packages/app/src/boot/fontawesome.ts",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/composables/_query.ts",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/storage/column-items.ts",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/components/ColumnGrid.tsx",["125"],"import React, { PropsWithChildren } from \"react\";\nimport GridLayout from \"react-grid-layout\";\nimport \"react-grid-layout/css/styles.css\";\nimport \"react-resizable/css/styles.css\";\nimport { AutoSizer } from \"react-virtualized\";\nimport { ColumnItem } from \"../storage/column-items\";\n\nconst HORIZONTAL_MARGIN = 5;\nconst VERTICAL_MARGIN = 0;\nconst COLUMNS = 12;\nconst COLUMN_WIDTH = 345;\n\nconst GRID_WIDTH = (COLUMNS * COLUMN_WIDTH) + (COLUMNS * HORIZONTAL_MARGIN);\n\nexport default function ColumnGrid({ onLayoutChange, children, columnItems }: PropsWithChildren<{ onLayoutChange(layout: GridLayout.Layout[]): void, columnItems: ColumnItem[] }>) {\n    return <div className=\"grid-track-root\">\n        <AutoSizer>\n            {({ height }) => (\n                <GridLayout className=\"column-track\"\n                    maxRows={1}\n                    cols={COLUMNS}\n                    margin={[HORIZONTAL_MARGIN, VERTICAL_MARGIN]}\n                    width={GRID_WIDTH}\n                    rowHeight={height}\n                    compactType={\"horizontal\"}\n                    isResizable={false}\n                    autoSize={true}\n                    draggableHandle=\".column-drag-handle\"\n                    onLayoutChange={onLayoutChange}\n                >\n                    {children}\n                </GridLayout>\n            )}\n        </AutoSizer>\n    </div>;\n}\n","/Users/ericrabil/eric.git/BBDash/packages/app/src/composables/useCourses.ts",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/composables/useStream.ts",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/composables/useGrades.ts",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/api.ts",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/api-clients/chrome.ts",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/api-clients/rest.ts",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/columns/CourseContentsColumn.tsx",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/composables/useCourseContents.ts",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/utils/feeds.ts",[],"/Users/ericrabil/eric.git/BBDash/packages/app/src/utils/prefs.ts",["126"],"export function activeKeys<T extends Record<string, boolean>>(obj?: T, excludeFromDefaults: (keyof T)[] = []): (keyof T)[] {\n    const active = Object.entries(obj || {}).filter(([ _, enabled ]) => enabled).map(([ key ]) => key);\n    if (active.length === 0) return Object.keys(obj || {}).filter(key => !excludeFromDefaults.includes(key));\n    else return active;\n}","/Users/ericrabil/eric.git/BBDash/packages/app/src/cells/CourseContentCell.tsx",["127"],"import { Course, CourseContentItem } from \"@bbdash/shared\";\nimport { DateTime } from \"luxon\";\nimport React from \"react\";\nimport ColumnCell from \"../components/ColumnCell\";\n\nexport default class CourseContentCell extends React.Component<{\n    course: Course;\n    content: CourseContentItem;\n    style?: React.CSSProperties;\n}> {\n    date() {\n        const timeString = this.props.content.modified || this.props.content.created;\n\n        if (!timeString) return null;\n        else return DateTime.fromISO(timeString).toLocaleString(DateTime.DATE_SHORT);\n    }\n\n    link() {\n        const [ link ] = this.props.content.links || [];\n\n        if (!link?.href) return null;\n        else return new URL(link.href, new URL(this.props.course.externalAccessUrl).origin).toString();\n    }\n\n    render() {\n        const date = this.date();\n        const link = this.link();\n\n        const HeaderTitle = link ? \"a\" : \"div\";\n\n        return <ColumnCell className=\"data-cell\" style={this.props.style}>\n            <div className=\"data-cell--inner\">\n                <div className=\"data-cell--header\">\n                    <HeaderTitle href={link!} target=\"_blank\" className=\"data-cell--header-title\">{this.props.content.title}</HeaderTitle>\n                    {\n                        date ? <div className=\"data-cell--muted\">{date}</div> : null\n                    }\n                </div>\n                <div className=\"data-cell--muted\">{this.props.course.displayName}</div>\n                <div className=\"data-cell--description\" dangerouslySetInnerHTML={{\n                    __html: this.props.content.body\n                }} />\n            </div>\n        </ColumnCell>;\n    }\n}","/Users/ericrabil/eric.git/BBDash/packages/app/src/utils/courses.ts",[],{"ruleId":"128","severity":1,"message":"129","line":12,"column":6,"nodeType":"130","messageId":"131","endLine":12,"endColumn":29},{"ruleId":"132","severity":1,"message":"133","line":16,"column":47,"nodeType":"134","messageId":"135","endLine":16,"endColumn":50,"suggestions":"136"},{"ruleId":"128","severity":1,"message":"137","line":20,"column":6,"nodeType":"130","messageId":"131","endLine":20,"endColumn":7},{"ruleId":"128","severity":1,"message":"138","line":26,"column":11,"nodeType":"130","messageId":"131","endLine":26,"endColumn":16},{"ruleId":"132","severity":1,"message":"133","line":67,"column":143,"nodeType":"134","messageId":"135","endLine":67,"endColumn":146,"suggestions":"139"},{"ruleId":"128","severity":1,"message":"140","line":5,"column":10,"nodeType":"130","messageId":"131","endLine":5,"endColumn":13},{"ruleId":"132","severity":1,"message":"133","line":55,"column":56,"nodeType":"134","messageId":"135","endLine":55,"endColumn":59,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":58,"column":44,"nodeType":"144","messageId":"145","endLine":58,"endColumn":49},{"ruleId":"146","severity":2,"message":"147","line":32,"column":9,"nodeType":"148","messageId":"149","endLine":32,"endColumn":22},{"ruleId":"142","severity":1,"message":"143","line":99,"column":14,"nodeType":"144","messageId":"145","endLine":99,"endColumn":29,"suggestions":"150"},{"ruleId":"128","severity":1,"message":"151","line":15,"column":64,"nodeType":"130","messageId":"131","endLine":15,"endColumn":75},{"ruleId":"128","severity":1,"message":"152","line":2,"column":56,"nodeType":"130","messageId":"131","endLine":2,"endColumn":57},{"ruleId":"142","severity":1,"message":"143","line":34,"column":40,"nodeType":"144","messageId":"145","endLine":34,"endColumn":45},"@typescript-eslint/no-unused-vars","'ExtractColumnOptionType' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["153","154"],"'x' is defined but never used.","'merge' is assigned a value but never used.",["155","156"],"'num' is defined but never used.",["157","158"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","@typescript-eslint/ban-ts-comment","Do not use \"@ts-ignore\" because it alters compilation errors.","Line","tsDirectiveComment",["159"],"'columnItems' is defined but never used.","'_' is defined but never used.",{"messageId":"160","fix":"161","desc":"162"},{"messageId":"163","fix":"164","desc":"165"},{"messageId":"160","fix":"166","desc":"162"},{"messageId":"163","fix":"167","desc":"165"},{"messageId":"160","fix":"168","desc":"162"},{"messageId":"163","fix":"169","desc":"165"},{"messageId":"170","fix":"171","desc":"172"},"suggestUnknown",{"range":"173","text":"174"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"173","text":"175"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"176","text":"174"},{"range":"176","text":"175"},{"range":"177","text":"174"},{"range":"177","text":"175"},"suggestOptionalChain",{"range":"178","text":"179"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",[707,710],"unknown","never",[2716,2719],[1757,1760],[3724,3725],"?."]